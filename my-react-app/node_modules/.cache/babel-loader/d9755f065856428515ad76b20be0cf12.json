{"ast":null,"code":"var _jsxFileName = \"/workspace/timer_react/my-react-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countTime: this.props.startValue\n    };\n  }\n\n  componentDidMount() {\n    // store the ID of the timer so we can kill it later\n    // this.timerID = setInterval(\n    //   () => this.setState({count: this.state.count - 1}),\n    //   1000\n    // );\n    // Above may be easier to understand for beginners,\n    // but the below is the correct way to do this as setState is async\n    this.timerID = setInterval(() => this.setState(prevState => ({\n      count: prevState.count - 1\n    })), 1000);\n  }\n\n  componentWillUnmount() {\n    // the clock is no longer being displayed so kill the timer\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    if (this.state.count > 0) {\n      return /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 14\n        }\n      }, \"Time remaining: \", this.state.count, \" seconds.\");\n    } else {\n      // the clock is no longer being displayed so kill the timer\n      clearInterval(this.timerID);\n      return /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 14\n        }\n      }, \"Time up!!\");\n    }\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Timer, {\n  startValue: 10,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(Timer, {\n  startValue: 30,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(Timer, {\n  startValue: 60,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }\n})), document.getElementById('root'));","map":{"version":3,"sources":["/workspace/timer_react/my-react-app/src/index.js"],"names":["React","ReactDOM","Timer","Component","constructor","props","state","countTime","startValue","componentDidMount","timerID","setInterval","setState","prevState","count","componentWillUnmount","clearInterval","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,SAAS,EAAE,KAAKF,KAAL,CAAWG;AAAvB,KAAb;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA,SAAKC,OAAL,GAAeC,WAAW,CACxB,MAAM,KAAKC,QAAL,CAAcC,SAAS,KAAK;AAChCC,MAAAA,KAAK,EAAED,SAAS,CAACC,KAAV,GAAiB;AADQ,KAAL,CAAvB,CADkB,EAIvB,IAJuB,CAA1B;AAKD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB;AACAC,IAAAA,aAAa,CAAC,KAAKN,OAAN,CAAb;AACD;;AAEDO,EAAAA,MAAM,GAAG;AACP,QAAG,KAAKX,KAAL,CAAWQ,KAAX,GAAmB,CAAtB,EAAwB;AACtB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAqB,KAAKR,KAAL,CAAWQ,KAAhC,cAAP;AACD,KAFD,MAEO;AACL;AACAE,MAAAA,aAAa,CAAC,KAAKN,OAAN,CAAb;AACA,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AACD;AACF;;AArCiC;;AAwCpCT,QAAQ,CAACgB,MAAT,eACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,KAAD;AAAO,EAAA,UAAU,EAAE,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,eAEE,oBAAC,KAAD;AAAO,EAAA,UAAU,EAAE,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,eAGE,oBAAC,KAAD;AAAO,EAAA,UAAU,EAAE,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHF,CADF,EAMEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {countTime: this.props.startValue};\n  }\n  \n  componentDidMount() {\n    // store the ID of the timer so we can kill it later\n    \n    // this.timerID = setInterval(\n    //   () => this.setState({count: this.state.count - 1}),\n    //   1000\n    // );\n    \n    \n    // Above may be easier to understand for beginners,\n    // but the below is the correct way to do this as setState is async\n    this.timerID = setInterval(\n      () => this.setState(prevState => ({\n        count: prevState.count -1\n      })\n    ), 1000);\n  }\n  \n  componentWillUnmount() {\n    // the clock is no longer being displayed so kill the timer\n    clearInterval(this.timerID);\n  }\n  \n  render() {\n    if(this.state.count > 0){\n      return <h2>Time remaining: {this.state.count} seconds.</h2>;\n    } else {\n      // the clock is no longer being displayed so kill the timer\n      clearInterval(this.timerID);\n      return <h2>Time up!!</h2>;\n    }\n  }\n}\n\nReactDOM.render(\n  <div>\n    <Timer startValue={10}/>\n    <Timer startValue={30}/>\n    <Timer startValue={60}/>\n  </div>,\n  document.getElementById('root')\n);"]},"metadata":{},"sourceType":"module"}