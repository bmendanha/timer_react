{"ast":null,"code":"var _jsxFileName = \"/workspace/timer_react/my-react-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countTime: this.props.startCount\n    };\n  }\n\n  componentDidMount() {\n    // store the timer id to use later to get rid of it\n    this.timerID = setInterval(() => this.setState(prevState => ({\n      countTime: prevState.countTime - 1\n    })), 1000);\n  }\n\n  componentWillUnmount() {\n    // the time won't be displayed so clear it\n    clearInterval(this.timerID);\n  } // return the state value\n\n\n  render() {\n    if (this.state.countTime > 0) {\n      return /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 20\n        }\n      }, \"Time remaining: \", this.state.countTime, \" seconds.\");\n    } else {\n      // the time won't be displayed so clear it\n      clearInterval(this.timerID);\n      return /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 20\n        }\n      }, \"Time up!!\");\n    }\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Timer, {\n  startCount: 10,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(Timer, {\n  startCount: 30,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(Timer, {\n  startCount: 60,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }\n})), document.getElementById('root'));","map":{"version":3,"sources":["/workspace/timer_react/my-react-app/src/index.js"],"names":["React","ReactDOM","Timer","Component","constructor","props","state","countTime","startCount","componentDidMount","timerID","setInterval","setState","prevState","componentWillUnmount","clearInterval","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,SAAS,EAAE,KAAKF,KAAL,CAAWG;AAAxB,KAAb;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB;AACA,SAAKC,OAAL,GAAeC,WAAW,CACtB,MAAM,KAAKC,QAAL,CAAcC,SAAS,KAAK;AAC9BN,MAAAA,SAAS,EAAEM,SAAS,CAACN,SAAV,GAAsB;AADH,KAAL,CAAvB,CADgB,EAInB,IAJmB,CAA1B;AAKH;;AAEDO,EAAAA,oBAAoB,GAAG;AACnB;AACAC,IAAAA,aAAa,CAAC,KAAKL,OAAN,CAAb;AACH,GAlB+B,CAoBhC;;;AACAM,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKV,KAAL,CAAWC,SAAX,GAAuB,CAA3B,EAA8B;AAC1B,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAqB,KAAKD,KAAL,CAAWC,SAAhC,cAAP;AACH,KAFD,MAEO;AACH;AACAQ,MAAAA,aAAa,CAAC,KAAKL,OAAN,CAAb;AACA,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AACH;AACJ;;AA7B+B;;AAgCpCT,QAAQ,CAACe,MAAT,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACI,oBAAC,KAAD;AAAO,EAAA,UAAU,EAAE,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,eAEI,oBAAC,KAAD;AAAO,EAAA,UAAU,EAAE,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFJ,eAGI,oBAAC,KAAD;AAAO,EAAA,UAAU,EAAE,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHJ,CADJ,EAMIC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANJ","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { countTime: this.props.startCount };\n    }\n\n    componentDidMount() {\n        // store the timer id to use later to get rid of it\n        this.timerID = setInterval(\n            () => this.setState(prevState => ({\n                countTime: prevState.countTime - 1\n            })\n            ), 1000);\n    }\n\n    componentWillUnmount() {\n        // the time won't be displayed so clear it\n        clearInterval(this.timerID);\n    }\n\n    // return the state value\n    render() {\n        if (this.state.countTime > 0) {\n            return <h2>Time remaining: {this.state.countTime} seconds.</h2>;\n        } else {\n            // the time won't be displayed so clear it\n            clearInterval(this.timerID);\n            return <h2>Time up!!</h2>;\n        }\n    }\n}\n\nReactDOM.render(\n    <div>\n        <Timer startCount={10} />\n        <Timer startCount={30} />\n        <Timer startCount={60} />\n    </div>,\n    document.getElementById('root')\n);"]},"metadata":{},"sourceType":"module"}